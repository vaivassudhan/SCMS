import _extends from 'babel-runtime/helpers/extends';
import React from 'react';
import deepmerge from 'deepmerge';
import shallowequal from 'shallowequal';
import defaultTheme from './themes/default';
export var ThemeContext = React.createContext(defaultTheme);
export var ThemeProvider = function ThemeProvider(props) {
    var value = props.value,
        children = props.children;

    var theme = React.useMemo(function () {
        return _extends(_extends({}, defaultTheme), value);
    }, [value]);
    return React.createElement(
        ThemeContext.Provider,
        { value: theme },
        children
    );
};
export var useTheme = function useTheme() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var theme = React.useContext(ThemeContext);
    return _extends(_extends({}, theme), props.theme);
};
export function WithTheme(props) {
    var children = props.children,
        themeStyles = props.themeStyles,
        styles = props.styles;

    var stylesRef = React.useRef(undefined);
    var cache = React.useRef(undefined);
    var getStyles = React.useCallback(function (theme) {
        if (themeStyles && cache.current === undefined) {
            cache.current = themeStyles(theme);
        }
        // TODO: check these styles has changed
        if (styles && !shallowequal(stylesRef.current, styles)) {
            stylesRef.current = styles;
            // merge styles from user defined
            cache.current = deepmerge(cache.current, styles);
        }
        return cache.current || {};
    }, [themeStyles, styles]);
    return React.createElement(
        ThemeContext.Consumer,
        null,
        function (theme) {
            return children(getStyles(theme), theme);
        }
    );
}