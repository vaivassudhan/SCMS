'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.useTheme = exports.ThemeProvider = exports.ThemeContext = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

exports.WithTheme = WithTheme;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _deepmerge = require('deepmerge');

var _deepmerge2 = _interopRequireDefault(_deepmerge);

var _shallowequal = require('shallowequal');

var _shallowequal2 = _interopRequireDefault(_shallowequal);

var _default = require('./themes/default');

var _default2 = _interopRequireDefault(_default);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var ThemeContext = exports.ThemeContext = _react2['default'].createContext(_default2['default']);
var ThemeProvider = exports.ThemeProvider = function ThemeProvider(props) {
    var value = props.value,
        children = props.children;

    var theme = _react2['default'].useMemo(function () {
        return (0, _extends3['default'])((0, _extends3['default'])({}, _default2['default']), value);
    }, [value]);
    return _react2['default'].createElement(
        ThemeContext.Provider,
        { value: theme },
        children
    );
};
var useTheme = exports.useTheme = function useTheme() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var theme = _react2['default'].useContext(ThemeContext);
    return (0, _extends3['default'])((0, _extends3['default'])({}, theme), props.theme);
};
function WithTheme(props) {
    var children = props.children,
        themeStyles = props.themeStyles,
        styles = props.styles;

    var stylesRef = _react2['default'].useRef(undefined);
    var cache = _react2['default'].useRef(undefined);
    var getStyles = _react2['default'].useCallback(function (theme) {
        if (themeStyles && cache.current === undefined) {
            cache.current = themeStyles(theme);
        }
        // TODO: check these styles has changed
        if (styles && !(0, _shallowequal2['default'])(stylesRef.current, styles)) {
            stylesRef.current = styles;
            // merge styles from user defined
            cache.current = (0, _deepmerge2['default'])(cache.current, styles);
        }
        return cache.current || {};
    }, [themeStyles, styles]);
    return _react2['default'].createElement(
        ThemeContext.Consumer,
        null,
        function (theme) {
            return children(getStyles(theme), theme);
        }
    );
}