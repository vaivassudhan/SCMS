{"version":3,"sources":["Item.tsx"],"names":["defaultProps","selectedColor","colors","primary","itemTextStyle","itemContainerStyle","rippleColor","enableAvatar","defaultAvatar","require","Item","item","selected","onSelect","disabled","avatarSize","disableSelectionTick","selectedItemTextStyle","selectedItemViewStyle","label","value","avatarSource","avatarComponent","styles","StyleSheet","create","unselected","color","paddingLeft","listView","flex","paddingVertical","height","ITEMLAYOUT","flexDirection","justifyContent","alignItems","iconView","width","textView","avatarView","backgroundColor","handleSelectValue","getSelectedStyles","Lo","isEmpty","Math","random","toString"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport { Avatar } from 'react-native-paper';\nimport MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';\nimport Lo from 'lodash';\nimport { colors, ITEMLAYOUT } from '../constants';\nimport type { IDropdownItemProps } from '../types';\nimport PressableTouch from './PressableTouch';\n\nconst defaultProps = {\n  selectedColor: colors.primary,\n  itemTextStyle: {},\n  itemContainerStyle: {},\n  rippleColor: 'rgba(0,0,0,0.1)',\n  enableAvatar: false,\n};\n\nconst defaultAvatar = require('../assets/ddicon.png');\n\nconst Item: React.FC<IDropdownItemProps> = ({\n  item,\n  selected,\n  onSelect,\n  selectedColor,\n  itemTextStyle,\n  itemContainerStyle,\n  rippleColor,\n  disabled,\n  enableAvatar,\n  avatarSize,\n  disableSelectionTick,\n  selectedItemTextStyle,\n  selectedItemViewStyle,\n}) => {\n  const { label, value, avatarSource, avatarComponent } = item;\n  const styles = StyleSheet.create({\n    unselected: {\n      color: colors.unselected,\n      paddingLeft: 5,\n    },\n    selected: {\n      color: selectedColor,\n      paddingLeft: 5,\n    },\n    listView: {\n      flex: 1,\n      paddingVertical: 10,\n      height: ITEMLAYOUT,\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n    },\n    iconView: {\n      width: 30,\n    },\n    textView: {\n      alignItems: 'center',\n      flexDirection: 'row',\n    },\n    avatarView: {\n      backgroundColor: 'transparent',\n    },\n  });\n\n  const handleSelectValue = () => {\n    onSelect(value);\n  };\n\n  const getSelectedStyles = () => {\n    if (!Lo.isEmpty(selectedItemTextStyle)) {\n      return { ...styles.selected, ...(selectedItemTextStyle as {}) };\n    } else return styles.selected;\n  };\n\n  return (\n    <PressableTouch\n      onPress={handleSelectValue}\n      disabled={disabled}\n      key={Math.random().toString()}\n      rippleColor={rippleColor}\n    >\n      <View\n        style={[\n          styles.listView,\n          itemContainerStyle,\n          selected === value && selectedItemViewStyle,\n        ]}\n      >\n        <View style={styles.textView}>\n          {enableAvatar ? (\n            avatarComponent ? (\n              avatarComponent\n            ) : (\n              <Avatar.Image\n                size={avatarSize}\n                style={styles.avatarView}\n                source={avatarSource || defaultAvatar}\n              />\n            )\n          ) : null}\n          <Text\n            style={[\n              itemTextStyle,\n              selected === value ? getSelectedStyles() : styles.unselected,\n            ]}\n          >\n            {label}\n          </Text>\n        </View>\n        <View style={styles.iconView}>\n          {!disableSelectionTick && selected === value ? (\n            <MaterialCommunityIcons\n              name=\"check\"\n              size={18}\n              color={selectedColor}\n            />\n          ) : null}\n        </View>\n      </View>\n    </PressableTouch>\n  );\n};\n\nItem.defaultProps = defaultProps;\n\nexport default Item;\n"]}